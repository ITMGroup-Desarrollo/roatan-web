---
import fs from "fs";
import path from "path";
import matter from "gray-matter";
import Layout from "../../layouts/Layout.astro";
import Header from "../../components/Headers/HeaderBlog.astro";
import Footer from "../../components/Footer/Footer.astro";
import Menu from "../../components/Headers/Menu.astro";
import BlogSwiper from "../../components/js/BlogSwiper.jsx";
import "../../assets/css/blog.css";
import { translations } from "../../locales.js";
const lang = Astro.params.lang || "es";
const t = translations[lang] ?? translations["es"];
const postsDir = path.resolve(`./src/posts/${lang}`);
const files = fs.readdirSync(postsDir);
export const prerender = true;
const posts = files.map((filename) => {
  const filePath = path.join(postsDir, filename);
  const fileContent = fs.readFileSync(filePath, "utf-8");
  const { data } = matter(fileContent);

  return {
    ...data,
    title: data.title || filename.replace(".md", ""),
    subtitle: data.subtitle || filename.replace(".md", ""),
    date: data.date || filename.replace(".md", ""),
    slug: data.slug || filename.replace(".md", ""),
    class: data.class || filename.replace(".md", ""),
    excerpt: data.excerpt || "",
    image: data.image?.url || "",
    alt: data.image?.alt || "",
  };
});
export function getStaticPaths() {
  return [{ params: { lang: "es" } }, { params: { lang: "en" } }];
}
---

<Layout lang={lang}>
  <Menu lang={lang} />
  <Header lang={lang} headerTitle="Blog" headerUrl="header-blog.webp" id="headerBlog-container"/>

  <div
    class="Blog-container bg-white w-screen flex flex-col items-center justify-center"
  >
    <div class="articles-container w-full px-8 md:w-4/5 md:-0">
      <div class="flex md:flex-row flex-col md:justify-between mb-8">
        <p class="text-4xl md:text-7xl text-[var(--darkblue-color)] mt-8">
          {t.blog.subtitle}
        </p>
      </div>
      <BlogSwiper posts={posts} lang={lang} client:load />
    </div>
  </div>
  <Footer lang={lang} videoFile="fondo-footer-blanco.mp4" />
  <script is:inline>
    function toggleShare(slug) {
      const container = document.getElementById(`share-items-${slug}`);
      if (!container) return;

      const links = container.querySelectorAll(".share-link");

      if (container.classList.contains("hidden")) {
        container.classList.remove("hidden");
        container.classList.add("flex");

        for (let i = links.length - 1, delay = 0; i >= 0; i--, delay++) {
          const link = links[i];
          link.classList.remove("pop");
          link.style.animationDelay = `${delay * 100}ms`;
          void link.offsetWidth;
          link.classList.add("pop");
        }
      } else {
        container.classList.remove("flex");
        container.classList.add("hidden");

        links.forEach((link) => {
          link.classList.remove("pop");
          link.style.animationDelay = "";
        });
      }
    }
  </script>
</Layout>
