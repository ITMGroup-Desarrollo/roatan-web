---
import Layout from "../../layouts/Layout.astro";
import Header from "../../components/Headers/HeaderBlog.astro";
import Footer from "../../components/Footer/Footer.astro";
import Menu from "../../components/Headers/Menu.astro";
import "../../assets/css/port-experience.css";
import WaveObserver from "../../components/js/WaveObserverSecondaryView.jsx";
const lang = Astro.params.lang || "es";

import fs from "fs";
import path from "path";
import matter from "gray-matter";
import { translations } from "../../locales.js";
const t = translations[lang] ?? translations["es"];
const postsDir = path.resolve(`./src/discover/${lang}`);
const files = fs.readdirSync(postsDir);
import SwiperClient from "../../components/js/SwiperSecondView";
import clientOnly from "@astrojs/react";
import { Image } from "astro:assets";
import "aos/dist/aos.css";
import olas from "../../assets/img/iconos/port-experience/ola.png";
// @ts-ignore
const SwiperClientOnly = clientOnly(SwiperClient);

const posts = files.map((filename) => {
  const filePath = path.join(postsDir, filename);
  const fileContent = fs.readFileSync(filePath, "utf-8");
  const { data } = matter(fileContent);

  return {
    ...data,
    title: data.title || filename.replace(".md", ""),
    subtitle: data.subtitle || filename.replace(".md", ""),
    date: data.date || filename.replace(".md", ""),
    slug: data.slug || filename.replace(".md", ""),
    class: data.class || filename.replace(".md", ""),
    excerpt: data.excerpt || "",
    icon: data.icon || "",
    image: data.image?.url || "",
    alt: data.image?.alt || "",
    direction: data.direction || "",
    fondo: data.fondo?.url || "",
    altfondo: data.fondo?.alt || "",
    capacity: data.capacity || "",
    duration: data.duration || "",
    note: data.note || "",
    icons: data.icons || [],
    requirements: data.requirements || [],
    firstgallery: data.firstgallery || [],
    secondgallery: data.secondgallery || [],
    combinedgallery: data.combinedgallery || [],
  };
});
export function getStaticPaths() {
  return [{ params: { lang: "es" } }, { params: { lang: "en" } }];
}
---

<Layout id="portExperience" lang={lang}>
  <Menu lang={lang} />
  <Header
    lang={lang}
    headerTitle={t.discover.title}
    headerSubtitle={t.discover.subtitle}
    headerUrl="header-discover.webp"
    id="headerDiscover-container"
  />
  <div
    id="tours-container"
    class="tours-containe bg-white max-w-full overflow-hidden"
  >
    {
      posts.map((post) => {
        return (
          <div class="single-post-container">
            <div
              class="relative principalview flex flex-col md:flex-row py-20 h-auto md:mb-0  w-screen "
              style={{
                backgroundImage: `url('${post.fondo}')`,
                backgroundSize: "cover",
                backgroundPosition: "center",
                backgroundRepeat: "no-repeat",
              }}
            >
              <div class="absolute inset-0 bg-white/80 flex flex-col md:flex-row justify-center items-center" />
              <div
                class={`${post.direction === "left" ? "md:order-1" : "md:order-2"} relative bg-transparent px-10 md:px-0 md:w-[55%] justify-center flex items-center`}
              >
                <div class="principal-items-container w-full md:pl-10 flex flex-col  justify-center gap-4 xl:gap-16">
                  <div class="text-container flex flex-col gap-2">
                    <h1
                      class={` ${post.direction === "left" ? "text-[var(--secondary-color)]" : "text-[var(--primary-color)]"} text-5xl md:text-6xl xl:text-8xl font-bebasBold`}
                      set:html={post.title}
                    />
                    <div
                      class={` ${post.direction === "left" ? "bg-[var(--secondary-color)]" : "bg-[var(--primary-color)]"} h-1 w-20`}
                    />
                    <p class="text-2xl text-[var(--darkblue-color)] text-justify md:text-left">
                      {post.excerpt}
                    </p>
                  </div>
                  <div
                    class={`flex md:hidden ${post.direction === "left" ? "md:order-2" : "md:order-1"} bg-transparent w-full`}
                  >
                    <img
                      src={post.image}
                      alt={post.alt}
                      class={`w-auto ${post.direction === "fill-primary-color" ? "fill-secondary-color" : "md:order-1"}`}
                    />
                  </div>
                  <div class="icons-container my-4 grid gap-4 grid-cols-2 md:grid-cols-3">
                    {post.icons &&
                      Array.isArray(post.icons) &&
                      post.icons.map((icon, index) => (
                        <div class="justify-center md:justify-start md:items-start flex ">
                          <div class="flex flex-col w-[65%] xl:w-[50%] items-center gap-2">
                            <img
                              class="w-16 xl:w-24 h-16 xl:h-24 object-contain"
                              src={icon.url}
                              alt={icon.alt ?? `Icon ${index + 1}`}
                            />
                            <span class="text-base md:text-lg text-center  text-[var(--darkblue-color)]">
                              {icon.name}
                            </span>
                          </div>
                        </div>
                      ))}
                  </div>
                  <button
                    data-slug={post.slug}
                    data-open-text={t.discover.buttonopen}
                    data-close-text={t.discover.buttonclose}
                    class={`toggleButton self-center md:self-start font-bebas text-left text-3xl xl:text-4xl xl:mx-3 w-fit uppercase ${post.direction === "left" ? "text-white bg-[var(--secondary-color)] border-2 border-[var(--secondary-color)] hover:bg-white hover:text-[var(--darkblue-color)] hover:border-2 hover:border-[var(--darkblue-color)]" : "text-[var(--darkblue-color)] bg-transparent border-2 border-[var(--darkblue-color)] hover:bg-white"}  pt-5 pb-4 md:py-2 px-4 xl:py-4 xl:px-8 rounded-xl overflow-hidden items-center`}
                    onclick="toggleSecondView(event)"
                  >
                    {t.discover.buttonopen}
                  </button>
                </div>
              </div>
              <div
                class={` ${post.direction === "left" ? "md:order-2" : "md:order-1"} hidden md:block bg-transparent w-[35%] z-20`}
              >
                <img
                  src={post.image}
                  alt={post.alt}
                  class={`object-contain w-auto md:h-[90%] ${post.direction === "fill-primary-color" ? "fill-secondary-color" : "md:order-1"}`}
                />
              </div>
            </div>

            <div
              class="secondview -mb-6 md:mb-0  invisible md:h-[96rem] pointer-events-none relative justify-center md:justify-items-center opacity-0 max-h-0 overflow-hidden transition-all duration-700 ease-in-out w-screen"
              data-slug={post.slug}
            >
              <div class="flex flex-col lg:grid lg:grid-cols-2 lg:grid-rows-2 h-full md:h-[80%] w-full md:w-[90%] gap-8 gap-y-16 mt-8">
                <div class="flex flex-col justify-center ">
                  <div class="flex justify-center">
                    <p class="w-[80%] pt-6 md:pt-0 text-center md:text-start text-3xl md:text-5xl xl:text-7xl text-[var(--secondary-color)] font-alverata font-bold ">
                      {t.discover.requirements}
                    </p>
                  </div>
                  <div class="flex justify-center items-start">
                    <ol class="pt-6 text-[var(--darkblue-color)] w-[90%] pl-6 space-y-4 md:columns-1 md:[column-count:2] max-h-[20rem] overflow-y-auto list-none">
                      {post.requirements.map((item) => (
                        <li class="break-inside-avoid w-[90%] relative pl-4 before:content-['â€¢'] before:absolute before:left-0 before:top-0">
                          {item.name}
                        </li>
                      ))}
                    </ol>
                  </div>
                  <div class=" flex justify-center">
                    <div class="w-[80%] grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                      <div class="flex p-4 col-span-1 items-center rounded-xl border-[var(--secondary-color)] border-2">
                        <img
                          src="/img/iconos/discover-beyond/capacity.svg"
                          alt="Capacity Icon"
                          class={`w-12 xl:w-24`}
                        />
                        <div class="h-full mx-4 w-[3px] bg-[var(--secondary-color)]" />
                        <div class="flex flex-col mx-auto text-[var(--darkblue-color)] font-bold">
                          <>
                            <p>{t.discover.Capacity}</p>
                            <p>{post.capacity}</p>
                          </>
                        </div>
                      </div>
                      <div class="flex p-4 col-span-1 items-center rounded-xl border-[var(--secondary-color)] border-2">
                        <img
                          src="/img/iconos/discover-beyond/clock.svg"
                          alt="Capacity Icon"
                          class={`w-10 xl:w-20`}
                        />
                        <div class="h-full mx-4 w-[3px] bg-[var(--secondary-color)]" />
                        <div class="flex flex-col mx-auto text-[var(--darkblue-color)] font-bold">
                          <>
                            <p>{t.discover.Duration}</p>
                            <p>{post.duration}</p>
                          </>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="h-fit flex justify-center md:h-auto">
                  <div class="w-[80%] h-[16rem] md:min-h-[20rem] md:h-full rounded-3xl overflow-hidden hidden md:flex">
                    <SwiperClient
                      slug={`${post.slug}-1`}
                      images={post.firstgallery}
                      client:only
                    />
                  </div>
                  <div class="w-[80%] h-[16rem] md:min-h-[20rem] md:h-full rounded-3xl overflow-hidden flex md:hidden">
                    <SwiperClient
                      slug={`${post.slug}-3`}
                      images={post.combinedgallery}
                      client:only
                    />
                  </div>
                </div>
                <div class="hidden md:flex justify-center">
                  <div class="w-[80%] h-[16rem] md:min-h-[20rem] md:h-full rounded-3xl overflow-hidden flex">
                    <SwiperClient
                      slug={`${post.slug}-2`}
                      images={post.secondgallery}
                      client:only
                    />
                  </div>
                </div>
                <div class="flex relative justify-center w-screen md:w-auto justify-self-center items-center md:items-end pb-10 md:pb-0">
                  <div class="wave-container  md:mt-8 absolute -top-2 md:top-0 md:h-[6rem] w-full md:-mr-[10%] right-0 bg-transparent z-1">
                    <Image
                      class="wave self-center w-[100%] h-[100%] right-0 top-0 object-fill"
                      src={olas}
                      alt="logo"
                      loading="eager"
                    />
                    <div class="wave-cover" />
                  </div>
                  <div class="note-container w-[80%]">
                    <>
                      <WaveObserver client:load />
                      <p class="text-3xl mt-20 md:mt-0 mb-4 md:text-5xl xl:text-7xl text-center md:text-start text-[var(--secondary-color)] font-alverata font-bold ">
                        {t.discover.Note}:
                      </p>
                      <p class="text-justify md:text-left">{post.note}</p>
                    </>
                  </div>
                </div>
              </div>
              <div class="w-full flex justify-center my-8">
                <button
                  data-slug={post.slug}
                  class={`toggleButton md:my-8 font-bebas bg-[var(--secondary-color)] text-white  border-2 border-[var(--secondary-color)] hover:bg-white hover:text-[var(--darkblue-color)] hover:border-2 hover:border-[var(--darkblue-color)] text-left text-3xl xl:text-4xl xl:mx-3 w-fit uppercase   py-2 px-4 xl:py-4 xl:px-8 rounded-xl overflow-hidden`}
                  onclick="toggleSecondView(event)"
                >
                  {t.discover.secondbutton}
                </button>
              </div>
            </div>
          </div>
        );
      })
    }
  </div>

  <Footer lang={lang} videoFile="fondo-footer-blanco.mp4" />
  <script is:inline>
    function toggleSecondView(event) {
      const button = event.currentTarget;
      const slug = button.getAttribute("data-slug");
      const openText = button.getAttribute("data-open-text");
      const closeText = button.getAttribute("data-close-text");

      // Buscar el bloque del post
      const postBlock =
        button.closest(".principalview")?.parentNode ||
        button.closest(".secondview")?.parentNode;

      if (!postBlock) return;

      // Buscar la .secondview dentro de ese bloque
      const view = postBlock.querySelector(`.secondview[data-slug="${slug}"]`);
      if (!view) return;

      const isHidden = view.classList.contains("invisible");

      // Cerrar otras abiertas
      document.querySelectorAll(".secondview").forEach((el) => {
        if (el !== view && !el.classList.contains("invisible")) {
          el.classList.remove("opacity-100");
          el.classList.add("opacity-0");

          setTimeout(() => {
            el.classList.remove("md:max-h-[150vh]", "pointer-events-auto");
            el.classList.add("max-h-0", "invisible", "pointer-events-none");
          }, 500);

          const parentCard = el.previousElementSibling;
          const otherBtn = parentCard?.querySelector(
            `button[data-slug="${el.dataset.slug}"]`
          );
          if (otherBtn)
            otherBtn.textContent = otherBtn.getAttribute("data-open-text");
        }
      });

      if (isHidden) {
        view.classList.remove("invisible", "pointer-events-none");
        view.classList.add("opacity-0", "pointer-events-auto");

        requestAnimationFrame(() => {
          view.classList.remove("max-h-0");
          view.classList.add("md:max-h-[150vh]");

          requestAnimationFrame(() => {
            view.classList.add("opacity-100");
          });
        });

        setTimeout(() => {
          view.scrollIntoView({ behavior: "smooth", block: "start" });
        }, 200);

        // Solo cambia el texto del botÃ³n principal
        if (button.closest(".principalview")) {
          button.textContent = closeText;
        }
      } else {
        view.classList.remove("opacity-100");
        view.classList.add("opacity-0");

        setTimeout(() => {
          view.classList.remove("md:max-h-[150vh]", "pointer-events-auto");
          view.classList.add("max-h-0", "invisible", "pointer-events-none");

          // ðŸ‘‡ Hacer scroll inverso a la vista principal
          const principalView = postBlock.querySelector(".principalview");
          if (principalView) {
            principalView.scrollIntoView({
              behavior: "smooth",
              block: "start",
            });
          }
        }, 500);

        // Cambiar texto del botÃ³n principal
        const parentCard = view.previousElementSibling;
        const mainBtn = parentCard?.querySelector(
          `button[data-slug="${slug}"]`
        );
        if (mainBtn) {
          mainBtn.textContent = mainBtn.getAttribute("data-open-text");
        }
      }
    }
  </script>
</Layout>
